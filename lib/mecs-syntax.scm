(define-library (lib mecs-syntax)
  (export value-component components systems plist$ comp)
  (import (kawa base))
  (begin
    (define-syntax comp
      (lambda (expr)
	(syntax-case expr ()
	  ((_ hd tl ...)
	   #'(list (quote hd) tl ...)))))
    (define-syntax components
      (lambda (expr)
	(define (all-identifiers? stx)
	  (syntax-case stx ()
	    (() #t)
	    ((hd tl ...)
	     (identifier? #'hd)
	     (all-identifiers? #'(tl ...)))
	    (_ #f)))
	(syntax-case expr ()
	  ((_ (component-name c-arg0 ...) ...)
	   (all-identifiers? #'(component-name ...))
	   #'(list (list (quote component-name) c-arg0 ...)
		   ...)))))
    (define-syntax plist$
      (lambda (expr)
	(define (valid-plist-body? stx)
	  (syntax-case stx ()
	    (() #t)
	    ((an-identifier something-else form ...)
	     (identifier? #'an-identifier)
	     (valid-plist-body? #'(form ...)))))
	(define (expand-plist-body parts acc)
	  (syntax-case parts ()
	    (() (with-syntax (((ac0 ...) acc))
		  #'(list ac0 ...)))
	    ((an-id a-form rest ...)
	     (identifier? #'an-id)
	     (expand-plist-body
	      #'(rest ...)
	      (with-syntax (((ac0 ...) acc))
		#'(ac0 ... (quote an-id) a-form))))))
 	(syntax-case expr ()
	  ((_ form ...)
	   (valid-plist-body? #'(form ...))
	   (expand-plist-body #'(form ...) #'())))))
    (define-syntax systems
      (lambda (expr)
	(define (mapcat f l)
	  (apply append (map f l)))
	(define (all-identifiers? stx)
	  (syntax-case stx ()
	    (() #t)
	    ((hd tl ...)
	     (identifier? #'hd)
	     (all-identifiers? #'(tl ...)))
	    (_ #f)))
	(define (expand-form stx)
	  (syntax-case stx ()
	    ((system-name (comp0 ...) args ...)
	     (and (identifier? #'system-name)
		  (all-identifiers? #'(comp0 ...)))
	     #'('system-name
		     '(comp0 ...)
		     (plist$ args ...)))
	    (anything-else
	     #'(error "parsing-systems-syntax" "Couldn't parse form: " #'anything-else))))
	(syntax-case expr ()
	  ((_ form ...)	   
	   (with-syntax (((transformed ...) (mapcat expand-form #'(form ...))))
	     #'(list transformed ...))))))
    (define-syntax value-component
      (lambda (expr)
	(syntax-case expr ()
	  ((value-component)
	   #'(lambda (e x) x))
	  ((value-component default)
	   #'(let ((default-lambda (lambda () default)))
	       (lambda (e . r)
		 (if (eq? r '())
		     (default-lambda)
		     (car r)))))
	  ((value-component name default)
	   (identifier? #'name)
	   #'(let ((default-lambda (lambda (name) default)))
	       (lambda (e . r)
		 (if (eq? r '())
		     (default-lambda e)
		     (car r))))))))))

