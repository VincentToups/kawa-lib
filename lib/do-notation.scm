(define-library (lib do-notation)
  (export begin-in begin-in-helper)
  (import (except (kawa base) match)
	  (lib shadchen))
  (begin
    (define-syntax begin-in-helper
      (lambda (expr)
	(define (looks-like-<== x)
	  (eq? '<- (syntax->datum x)))
	(define (looks-like-match x)
	  (eq? 'match: (syntax->datum x)))
	(syntax-case expr ()
	  ((_ bind (nm bind-symbol expr) flp0 flp ...)
	   (and (identifier? #'nm)
		(looks-like-<== #'bind-symbol))
	   #'(bind expr (lambda (nm) (begin-in-helper bind flp0 flp ...))))
	  ((_ bind (matchid pattern expr) flp0 flp ...)
	   (looks-like-match #'matchid)
	   #'(match expr
	       (pattern (begin-in-helper bind flp0 flp ...))))
	  ((_ bind (ptrn bind-symbol expr) flp0 flp ...)
	   (looks-like-<== #'bind-symbol)
	   #'(bind expr (lambda (value)
			  (match value
			    (ptrn (begin-in-helper bind flp0 flp ...))))))
	  ((_ bind expr)
	   #'expr)
	  ((_ bind expr0 expr ...)
	   #'(bind expr0 (lambda (_) (begin-in-helper bind expr ...)))))))
    (define-syntax begin-in
      (lambda (expr)
	(syntax-case expr ()
	  ((_ bind-expr body0 body ...)
	   #'(let ((bind bind-expr))
	       (begin-in-helper bind body0 body ...))))))))
